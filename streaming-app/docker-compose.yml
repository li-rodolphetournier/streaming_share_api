version: "3.8"

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: streaming_postgres
    environment:
      POSTGRES_DB: streaming_db
      POSTGRES_USER: streaming_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-streaming_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U streaming_user -d streaming_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - streaming_network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: streaming_redis
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.25"
        reservations:
          memory: 64M
          cpus: "0.1"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD:-redis_password_2024}",
          "ping",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - streaming_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: streaming_backend
    environment:
      NODE_ENV: development
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: streaming_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-streaming_password_2024}
      POSTGRES_DB: streaming_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_2024}
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_change_in_production_2024}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_super_secret_refresh_key_change_in_production_2024}
      MEDIA_PATH: /media
      UPLOADS_PATH: /uploads
      HLS_PATH: /tmp/hls
      API_PORT: 3001
      API_HOST: 0.0.0.0
    volumes:
      - ./backend/src:/app/src
      - media_storage:/media
      - upload_storage:/uploads
      - hls_cache:/tmp/hls
      - backend_logs:/app/logs
      - /app/node_modules
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "2.0"
        reservations:
          memory: 1G
          cpus: "1.0"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - streaming_network

  # Frontend (mode production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3001/api}
        VITE_MOCK_API: ${VITE_MOCK_API:-false}
    container_name: streaming_frontend
    ports:
      - "3002:80"
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.5"
        reservations:
          memory: 64M
          cpus: "0.25"
    restart: unless-stopped
    networks:
      - streaming_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: streaming_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - hls_cache:/var/www/hls:ro
      - media_storage:/var/www/media:ro
      - upload_storage:/var/www/uploads:ro
    ports:
      - "8081:80"
    depends_on:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: "0.25"
        reservations:
          memory: 32M
          cpus: "0.1"
    restart: unless-stopped
    networks:
      - streaming_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MEDIA_PATH:-./media}
  upload_storage:
    driver: local
  hls_cache:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=2G
  backend_logs:
    driver: local

networks:
  streaming_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
